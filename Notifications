local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local Notifications = {}
local Player = Players.LocalPlayer

local PlayerGui = Player:WaitForChild("PlayerGui")
local ScreenGui = PlayerGui:FindFirstChild("NotificationGui") or Instance.new("ScreenGui")
local NotificationContainer = ScreenGui:FindFirstChild("NotificationContainer") or Instance.new("Frame")
local UIListLayout = NotificationContainer:FindFirstChild("UIListLayout") or Instance.new("UIListLayout")

ScreenGui.Name = "NotificationUI"
ScreenGui.Parent = game.CoreGui
ScreenGui.ResetOnSpawn = false -- Prevent ScreenGui from resetting on respawn

NotificationContainer.Name = "NotificationContainer"
NotificationContainer.Size = UDim2.new(0, 300, 0, 0) -- Height will be managed by UIListLayout
NotificationContainer.Position = UDim2.new(1, -170, 0.9, -5) -- Position in bottom-right corner
NotificationContainer.AnchorPoint = Vector2.new(1, 1) -- Anchor at bottom-right
NotificationContainer.BackgroundTransparency = 1
NotificationContainer.Parent = ScreenGui

UIListLayout.Parent = NotificationContainer
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom -- Stack notifications from bottom to top
UIListLayout.Padding = UDim.new(0, 10) -- Spacing between notifications

function Notifications:createNotification(text, duration)
    local Frame = Instance.new("Frame")
    local TextLabel = Instance.new("TextLabel")
    local UICorner = Instance.new("UICorner")
    local BlueBar = Instance.new("Frame")
    local BlueBarCorner = Instance.new("UICorner")

    -- Setup the Frame
    Frame.Size = UDim2.new(1, -20, 0, 70)
    Frame.BackgroundTransparency = 0.2
    Frame.BackgroundColor3 = Color3.new(0, 0, 0) -- Set background to black
    Frame.Parent = NotificationContainer
    Frame.LayoutOrder = 1 -- Ensure new notifications appear at the bottom

    -- Setup UICorner for the main Frame
    UICorner.CornerRadius = UDim.new(0, 12) -- Customize the corner radius
    UICorner.Parent = Frame

    -- Setup the TextLabel
    TextLabel.Size = UDim2.new(1, -20, 0.7, 0) -- Text size adjusted to fit properly
    TextLabel.Position = UDim2.new(0, 10, 0, 5) -- Padding around the text
    TextLabel.BackgroundTransparency = 1
    TextLabel.Text = text
    TextLabel.TextWrapped = true -- Enable text wrapping
    TextLabel.TextScaled = true  -- Auto scale text to fit
    TextLabel.TextColor3 = Color3.new(1, 1, 1)
    TextLabel.Font = Enum.Font.SourceSansBold
    TextLabel.TextSize = 24
    TextLabel.Parent = Frame

    -- Setup the BlueBar below the text
    BlueBar.Size = UDim2.new(1, 0, 0.15, 0) -- Bar at the bottom of the frame
    BlueBar.Position = UDim2.new(0, 0, 0.85, 0) -- Positioned below the text
    BlueBar.BackgroundColor3 = Color3.fromRGB(0, 120, 200) -- Darker blue color
    BlueBar.Parent = Frame

    -- Add UICorner to the BlueBar
    BlueBarCorner.CornerRadius = UDim.new(0, 12)
    BlueBarCorner.Parent = BlueBar

    -- Tween the blue bar to shrink as the duration decreases
    local barTweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
    local barShrink = TweenService:Create(BlueBar, barTweenInfo, {Size = UDim2.new(0, 0, 0.15, 0)})
    barShrink:Play()

    -- Tween effect to make notification fade in and fade out
    local fadeTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
    local fadeIn = TweenService:Create(Frame, fadeTweenInfo, {BackgroundTransparency = 0})
    local fadeOut = TweenService:Create(Frame, fadeTweenInfo, {BackgroundTransparency = 1})

    fadeIn:Play()

    -- Wait for the specified duration before fading out
    wait(duration or 3)
    fadeOut:Play()

    -- Destroy the notification after fade-out
    fadeOut.Completed:Wait()
    Frame:Destroy()

    -- Dragging functionality
    local dragging
    local dragInput
    local startPos
    local startPosInput

    local function updatePosition(input)
        local delta = input.Position - startPosInput
        Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    local function onInputChanged(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            updatePosition(input)
        end
    end

    Frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            startPos = Frame.Position
            startPosInput = input.Position
            Frame.BackgroundTransparency = 0.5 -- Make frame semi-transparent while dragging
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    Frame.BackgroundTransparency = 0.2 -- Restore transparency after dragging
                end
            end)
        end
    end)

    UserInputService.InputChanged:Connect(onInputChanged)
end
